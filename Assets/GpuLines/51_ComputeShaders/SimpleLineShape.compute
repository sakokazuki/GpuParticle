
#pragma kernel CSMain
#include "UnityCG.cginc"
#include "Assets/Cgincs/Utils.cginc"
#include "Assets/Cgincs/Noise/SimplexNoise3D.cginc"

RWTexture2D<float4> positionBuffer;
RWTexture2D<float4> normalBuffer;
RWTexture2D<float4> velocityBuffer;

//uniform
float _LineAngle;
float3 _WorldCameraPosition;
float _VelocityScale;



float3 Position(float2 uv) {
	float lineId = uv.x;
	float segmentId = uv.y;
	float z = snoise(float3(uv*5, _Time.y))*0.3;
	
	float3 position = float3(lineId, segmentId, z);
	return position;
}

float dot(float3 a, float3 b) {
	return a.x * b.x + a.y * b.y + a.z * b.z;
}

float4 Normal(float3 position, float2 uv) {
	float2 uv0 = uv;
	float delta = 0.01;
	float2 uv1 = float2(uv.x, uv.y + delta);
	float2 uv2 = float2(uv.x, uv.y - delta);
	if (uv0.y < delta) {
		uv0.y += delta; uv1.y += delta; uv2.y += delta;
	}
	if (uv0.y > 1 - delta) {
		uv0.y -= delta; uv1.y -= delta; uv2.y -= delta;
	}

	float3 sur0 = position;
	float3 sur1 = Position(uv1);
	float3 sur2 = Position(uv2);

	//binormal
	float3 vec0 = sur1 - sur2;
	float3 vec1 = sur1 - sur0;
	float3 vec2 = sur2 - sur0;
	float3 binormal = normalize(cross(vec1, vec2));
	float3 normal = normalize(cross(binormal, vec0));

	float3 eye = _WorldCameraPosition - sur0;
	float d = dot(eye, normal);
	if (d > 0.0) {
		binormal *= -1;
	}

	
	

	//normalの向きを調べる
	/*float3 eye = float3(sur0 - _WorldCameraPosition);
	float dir = dot(sur1 - sur0, sur2 - sur0);
	if (dir > 0) {
		normal *= -1;
	}*/
	//normal *= -1;
	////カメラ方向のベクトル(normal)
	//float3 eyeDir = _WorldCameraPosition - sur0;
	////次の点へのベクトル
	//float3 toDir = normalize(sur0 - sur1);
	////それぞれのベクトルに直角なベクトル(binormal)
	//float3 sideDir = cross(toDir, eyeDir);

	//rendererのシェーダーはnormalはそのままNormalとして使い、
	//birnormal方向にポリゴンを広げるようになっている
	//float3 normal = normalize(eyeDir);
	//float3 binormal = normalize(sideDir);
	
	//ここでリターンするとカメラに正対するmeshになる
	//return float4(StereoProjection(normal), StereoProjection(binormal));
	
	//--- rotate angle
	/*float deg2pi = UNITY_PI / 180;
	float angle1 = _LineAngle * deg2pi;
	float angle2 = (_LineAngle + 90) * deg2pi;

	float3 no = normal;
	float3 bi = binormal;
	normal = cos(angle2) * bi + sin(angle2) * no;
	binormal = cos(angle1) * bi + sin(angle1) * no;
	normal = normalize(normal);
	binormal = normalize(binormal);*/
	return float4(StereoProjection(normal), StereoProjection(binormal));
}


[numthreads(8, 8, 1)]
void CSMain(uint3 dispatchThreadID : SV_DispatchThreadID)
{
	float lineCount, segmentCount;
	positionBuffer.GetDimensions(lineCount, segmentCount);
	float2 uv = float2(dispatchThreadID.x / lineCount, dispatchThreadID.y / segmentCount);
	
	
	float3 position = Position(uv);
	float4 normal = Normal(position, uv);
	//veolocity

	//pre 1frame buffer
	float3 pPositionBuffer = positionBuffer[dispatchThreadID.xy]; 
	float3 velocity = (position - pPositionBuffer) * _VelocityScale;
	
	positionBuffer[dispatchThreadID.xy] = float4(position, 1);
	normalBuffer[dispatchThreadID.xy] = normal;
	velocityBuffer[dispatchThreadID.xy] = float4(velocity, 1);
}